{"version":3,"sources":["SolController.jsx","BscController.jsx","assets/img/dingocoin.png","App.jsx","index.jsx"],"names":["TOKEN_PUB_KEY","web3","connection","toSatoshi","x","xs","toFixed","substr","length","slice","fromSatoshi","startsWith","integer","fractional","padStart","BigInt","toString","replace","sha256","data","crypto","createHash","update","digest","isValidDingocoinAddress","raw","bs58","decode","checksum","equals","OnboardingButton","props","React","useState","wallet","setWallet","undefined","account","setAccount","onWalletButtonClick","a","provider","window","open","connect","then","onWalletChange","getTokenAccountsByOwner","publicKey","mint","accounts","value","onAccountChange","catch","console","log","onAccountButtonClick","splToken","getAssociatedTokenAddress","accountPubKey","tx","add","createAssociatedTokenAccountInstruction","getRecentBlockhash","recentBlockhash","blockhash","feePayer","signAndSendTransaction","signature","confirmTransaction","className","disabled","onClick","toBase58","SolController","AUTHORITY_NODES","location","port","label","authorityLink","post","link","controller","AbortController","setTimeout","abort","fetch","withCredentials","method","signal","headers","Accept","body","JSON","stringify","json","setProvider","useEffect","solana","isPhantom","aliveNodes","setAliveNodes","randAuthorityLink","node","Math","floor","random","alive","i","push","parseInt","mintDepositAddresses","setMintDepositAddresses","hasMintDepositAddress","setHasMintDepositAddress","isCreatingMintDepositAddress","setIsCreatingMintDepositAddress","burnAmount","setBurnAmount","burnDestination","setBurnDestination","burnHistory","setBurnHistory","stableAuthorityLink","stats","setStats","selectedWallet","selectedAccount","pubkey","refresh","mintAddress","mintBalance","depositAddress","unconfirmedAmount","depositedAmount","approvedAmount","getSignaturesForAddress","filter","confirmationStatus","memo","split","map","tokens","burnSignature","Promise","all","burnHistories","every","status","refreshLoop","onCreateDepositAddress","alert","generateDepositAddressResponses","registerMintDepositAddressResponses","Error","onBurn","parseFloat","createBurnInstruction","keys","isSigner","isWritable","programId","Buffer","from","onWithdraw","burn","authorityNode","target","rel","href","style","color","fontSize","onChange","e","placeholder","test","burnIndex","includes","unconfirmedUtxos","totalChangeBalance","totalDepositsBalance","confirmedDeposits","remainingApprovableAmount","unconfirmedDeposits","totalDepositedAmount","withdrawals","totalApprovedAmount","walletAddress","CONTRACT_ADDRESS","CONTRACT_ABI","inputs","stateMutability","type","anonymous","indexed","internalType","name","outputs","buttonText","setButtonText","onboarding","useRef","current","MetaMaskOnboarding","isMetaMaskInstalled","ethereum","request","acc","Web3","utils","toChecksumAddress","startOnboarding","BscController","contract","eth","Contract","mintedAmount","burnAddress","maxLength","max","reverse","methods","totalSupply","call","onMint","mintTransactionInfos","Array","fill","r","availableMintTransactionInfos","nonce","mintAmount","signV","onContractVerification","v","signR","signS","s","params","to","encodeABI","Number","Container","placeHolder","totalApprovableAmount","App","setController","Navbar","bg","expand","sticky","Brand","alt","src","DingocoinLogo","Toggle","Collapse","Nav","Link","Row","DropdownButton","title","Dropdown","Item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28e7728e.chunk.js","sourcesContent":["import React from \"react\";\nimport * as web3 from \"@solana/web3.js\";\nimport * as splToken from \"@solana/spl-token\";\nimport BigInt from \"big-integer\";\nimport bs58 from \"bs58\";\nimport crypto from \"crypto\";\nimport { Container } from \"react-bootstrap\";\n\nconst TOKEN_PUB_KEY = new web3.PublicKey(\n  \"6VYF5jXq6rfq4QRgGMG6co7b1Ev1Lj7KSbHBxfQ9e1L3\"\n);\nconst connection = new web3.Connection(\n  web3.clusterApiUrl(\"mainnet-beta\"),\n  \"confirmed\"\n);\n\nconst DECIMALS = 8;\n\nconst toSatoshi = (x) => {\n  let xs = x.toFixed(DECIMALS);\n  xs = xs.substr(0, xs.length - DECIMALS - 1) + xs.slice(xs.length - DECIMALS);\n  return xs;\n};\n\nconst numberWithCommas = (x) => {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\nconst fromSatoshi = (xs) => {\n  if (xs.startsWith(\"-\")) {\n    return \"0\";\n  }\n  let integer = xs.slice(0, xs.length - DECIMALS);\n  if (integer === \"\") {\n    integer = \"0\";\n  }\n\n  const fractional = xs.slice(xs.length - DECIMALS).padStart(DECIMALS, \"0\");\n  if (BigInt(fractional) >= 50000000) {\n    integer = (BigInt(integer) + BigInt(\"1\")).toString();\n  }\n\n  return integer === \"\" ? \"0\" : numberWithCommas(integer);\n};\n\nfunction sha256(data) {\n  return crypto.createHash(\"sha256\").update(data).digest();\n}\n\nconst isValidDingocoinAddress = (x) => {\n  const raw = bs58.decode(x);\n  if (raw.length !== 25) {\n    return false;\n  }\n  if (raw[0] !== 0x16 && raw[0] !== 0x1e) {\n    return false;\n  }\n  const checksum = sha256(sha256(raw.slice(0, 21)));\n  return raw.slice(21, 25).equals(checksum.slice(0, 4));\n};\n\nfunction OnboardingButton(props) {\n  const [wallet, setWallet] = React.useState(null);\n  const [account, setAccount] = React.useState(undefined);\n\n  const onWalletButtonClick = async () => {\n    if (props.provider === null) {\n      window.open(\"https://phantom.app/\", \"_blank\");\n    } else {\n      await props.provider\n        .connect()\n        .then(async (x) => {\n          setWallet(x);\n          if (props.onWalletChange) {\n            props.onWalletChange(x);\n          }\n\n          const accounts = await connection.getTokenAccountsByOwner(\n            x.publicKey,\n            { mint: TOKEN_PUB_KEY }\n          );\n          if (accounts.value.length > 0) {\n            setAccount(accounts.value[0]);\n            props.onAccountChange(accounts.value[0]);\n          } else {\n            setAccount(null);\n            props.onAccountChange(null);\n          }\n        })\n        .catch(console.log);\n    }\n  };\n\n  const onAccountButtonClick = async () => {\n    // Retrieve token account pubkey.\n    const accountPubKey = await splToken.Token.getAssociatedTokenAddress(\n      splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      splToken.TOKEN_PROGRAM_ID,\n      TOKEN_PUB_KEY,\n      wallet.publicKey\n    );\n\n    // Prepare transaction.\n    const tx = new web3.Transaction().add(\n      splToken.Token.createAssociatedTokenAccountInstruction(\n        splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n        splToken.TOKEN_PROGRAM_ID,\n        TOKEN_PUB_KEY,\n        accountPubKey,\n        wallet.publicKey,\n        wallet.publicKey\n      )\n    );\n    tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n    tx.feePayer = wallet.publicKey;\n\n    // Sign and send.\n    const { signature } = await props.provider.signAndSendTransaction(tx);\n    await connection.confirmTransaction(signature);\n\n    // Refresh list.\n    const accounts = await connection.getTokenAccountsByOwner(\n      wallet.publicKey,\n      { mint: TOKEN_PUB_KEY }\n    );\n    if (accounts.value.length > 0) {\n      setAccount(accounts.value[0]);\n      props.onAccountChange(accounts.value[0]);\n    }\n  };\n\n  return (\n    <div>\n      <button\n        className=\"button button3\"\n        disabled={wallet !== null ? true : false}\n        onClick={onWalletButtonClick}\n      >\n        {props.provider === null\n          ? \"Click here to install Phantom wallet!\"\n          : wallet === null\n          ? \"Connect Phantom wallet to convert\"\n          : wallet.publicKey.toBase58()}\n      </button>\n      <br />\n      {typeof account !== \"undefined\" && (\n        <button\n          className=\"button button3 mb-4\"\n          disabled={account !== null ? true : false}\n          onClick={onAccountButtonClick}\n        >\n          {account === null\n            ? \"Create wDingocoin token account to convert\"\n            : \"wDingocoin token account found for wallet\"}\n        </button>\n      )}\n    </div>\n  );\n}\n\nfunction SolController() {\n  const AUTHORITY_NODES = [\n    { location: \"n5.dingocoin.org\", port: 8443, label: \"Node 5\" },\n    { location: \"n6.dingocoin.org\", port: 8443, label: \"Node 6\" },\n    { location: \"n8.dingocoin.org\", port: 8443, label: \"Node 8\" },\n    { location: \"n9.dingocoin.org\", port: 8443, label: \"Node 9\" },\n    { location: \"n10.dingocoin.org\", port: 8443, label: \"Node 10\" },\n  ];\n  const authorityLink = (x) => {\n    return `https://${x.location}:${x.port}`;\n  };\n\n  async function post(link, data) {\n    const controller = new AbortController();\n    setTimeout(() => controller.abort(), 5000);\n    return (\n      await fetch(link, {\n        withCredentials: true,\n        method: \"POST\",\n        signal: controller.signal,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      })\n    ).json();\n  }\n\n  const [provider, setProvider] = React.useState(null);\n  React.useEffect(() => {\n    if (\"solana\" in window) {\n      const provider = window.solana;\n      if (provider.isPhantom) {\n        setProvider(provider);\n      }\n    }\n  }, []);\n\n  const [wallet, setWallet] = React.useState(null);\n  const [account, setAccount] = React.useState(null);\n\n  const [aliveNodes, setAliveNodes] = React.useState(null);\n  const randAuthorityLink = () => {\n    const node =\n      AUTHORITY_NODES[\n        aliveNodes[Math.floor(Math.random() * aliveNodes.length)]\n      ];\n    return `https://${node.location}:${node.port}`;\n  };\n  React.useEffect(() => {\n    (async () => {\n      if (aliveNodes === null) {\n        const alive = [];\n        for (const i in AUTHORITY_NODES) {\n          await post(`${authorityLink(AUTHORITY_NODES[i])}/ping`)\n            .then(() => {\n              alive.push(parseInt(i));\n            })\n            .catch(() => {});\n        }\n        setAliveNodes(alive);\n      }\n    })();\n  });\n\n  const [mintDepositAddresses, setMintDepositAddresses] = React.useState([]);\n  const [hasMintDepositAddress, setHasMintDepositAddress] =\n    React.useState(null);\n  const [isCreatingMintDepositAddress, setIsCreatingMintDepositAddress] =\n    React.useState(false);\n\n  const [burnAmount, setBurnAmount] = React.useState(\"\");\n  const [burnDestination, setBurnDestination] = React.useState(\"\");\n  const [burnHistory, setBurnHistory] = React.useState(null);\n\n  const stableAuthorityLink = () => {\n    const node = AUTHORITY_NODES[AUTHORITY_NODES.length - 1];\n    return `https://${node.location}:${node.port}`;\n  };\n  const [stats, setStats] = React.useState(null);\n  React.useEffect(() => {\n    (async () => {\n      if (\n        aliveNodes !== null &&\n        stats === null &&\n        AUTHORITY_NODES.length - 1 in aliveNodes\n      ) {\n        const stats = (await post(`${stableAuthorityLink()}/stats`)).data;\n        console.log(stats);\n        setStats(stats);\n      }\n    })();\n  }, [aliveNodes, stats]);\n\n  const onWalletChange = async (selectedWallet) => {\n    setWallet(selectedWallet.publicKey.toBase58());\n  };\n  const onAccountChange = async (selectedAccount) => {\n    if (selectedAccount !== null) {\n      setAccount(selectedAccount.pubkey.toBase58());\n    }\n  };\n\n  const refresh = async () => {\n    const mintBalance = (\n      await post(`${randAuthorityLink()}/queryMintBalance`, {\n        mintAddress: wallet,\n      })\n    ).data;\n    if (mintBalance !== null && mintBalance !== undefined) {\n      setMintDepositAddresses([\n        {\n          depositAddress: mintBalance.depositAddress,\n          unconfirmedAmount: mintBalance.unconfirmedAmount,\n          depositedAmount: mintBalance.depositedAmount,\n          approvedAmount: mintBalance.approvedAmount,\n        },\n      ]);\n      setHasMintDepositAddress(true);\n    } else {\n      setMintDepositAddresses([]);\n      setHasMintDepositAddress(false);\n    }\n\n    // Retrieve burns from chain.\n    let burnHistory = await connection.getSignaturesForAddress(\n      new web3.PublicKey(wallet)\n    );\n    burnHistory = burnHistory.filter(\n      (x) =>\n        (x.confirmationStatus === \"finalized\" ||\n          x.confirmationStatus === \"confirmed\") &&\n        x.memo !== null\n    );\n    burnHistory = burnHistory.filter(\n      (x) =>\n        x.memo.split(\" \").length === 2 &&\n        x.memo.split(\" \")[1].split(\"|\").length === 3\n    );\n    burnHistory = burnHistory.map((x) => {\n      const tokens = x.memo.split(\" \")[1].split(\"|\");\n      return {\n        burnDestination: tokens[1],\n        burnAmount: tokens[2],\n        burnSignature: x.signature,\n      };\n    });\n    burnHistory = burnHistory.filter(\n      (x) => BigInt(x.burnAmount) >= toSatoshi(100000)\n    );\n\n    // Retrieve burnHistory records from nodes.\n    const burnHistories = (\n      await Promise.all(\n        aliveNodes\n          .map((i) => AUTHORITY_NODES[i])\n          .map((x, i) =>\n            post(`${authorityLink(x)}/queryBurnHistory`, {\n              burnHistory: burnHistory,\n            })\n          )\n      )\n    ).map((x) => x.data.burnHistory);\n\n    for (let i = 0; i < burnHistory.length; i++) {\n      if (burnHistories.every((x) => x[i].status === \"APPROVED\")) {\n        burnHistory[i].status = \"APPROVED\";\n      } else if (\n        burnHistories.every(\n          (x) => x[i].status === \"APPROVED\" || x[i].status === \"SUBMITTED\"\n        )\n      ) {\n        burnHistory[i].status = \"SUBMITTED\";\n      } else {\n        burnHistory[i].status = null;\n      }\n    }\n\n    setBurnHistory(burnHistory);\n  };\n\n  React.useEffect(() => {\n    (async () => {\n      if (aliveNodes === null) {\n        const alive = [];\n        for (const i in AUTHORITY_NODES) {\n          await post(`${authorityLink(AUTHORITY_NODES[i])}/ping`)\n            .then(() => {\n              alive.push(parseInt(i));\n            })\n            .catch(() => {});\n        }\n        setAliveNodes(alive);\n      }\n    })();\n  });\n\n  React.useEffect(() => {\n    if (wallet !== null && account !== null && aliveNodes !== null) {\n      const refreshLoop = () => {\n        refresh();\n        setTimeout(refreshLoop, 10000);\n      };\n      refreshLoop();\n    }\n  }, [wallet, account, aliveNodes]);\n\n  const onCreateDepositAddress = async () => {\n    if (aliveNodes.length < AUTHORITY_NODES.length) {\n      alert(\n        \"Creating a deposit address requires all authority nodes to be online.\"\n      );\n      return;\n    }\n\n    setIsCreatingMintDepositAddress(true);\n    const generateDepositAddressResponses = await Promise.all(\n      AUTHORITY_NODES.map(async (x) => {\n        return await post(`${authorityLink(x)}/generateDepositAddress`, {\n          mintAddress: wallet,\n        });\n      })\n    );\n\n    const registerMintDepositAddressResponses = await Promise.all(\n      AUTHORITY_NODES.map(\n        async (x) =>\n          (\n            await post(`${authorityLink(x)}/registerMintDepositAddress`, {\n              mintAddress: wallet,\n              generateDepositAddressResponses: generateDepositAddressResponses,\n            })\n          ).data\n      )\n    );\n\n    if (\n      !registerMintDepositAddressResponses.every(\n        (x) =>\n          x.depositAddress ===\n          registerMintDepositAddressResponses[0].depositAddress\n      )\n    ) {\n      throw new Error(\"Consensus failure on deposit address\");\n    }\n\n    await refresh();\n    setIsCreatingMintDepositAddress(false);\n  };\n\n  const onBurnDestinationChange = (e) => {\n    setBurnDestination(e.target.value.replace(/\\s+/, \"\"));\n  };\n\n  const onBurnAmountChange = (e) => {\n    if (/^\\d*\\.?\\d{0,8}$/.test(e.target.value)) {\n      setBurnAmount(e.target.value);\n    }\n  };\n\n  const onBurn = async () => {\n    if (!isValidDingocoinAddress(burnDestination)) {\n      alert(\"Burn destination is not a valid Dingocoin address!\");\n      return;\n    }\n\n    if (parseFloat(burnAmount) < 100000) {\n      alert(\"Burn amount must be at least 100,000.\");\n      return;\n    }\n\n    // Populate tx details.\n    const tx = new web3.Transaction();\n    tx.add(\n      splToken.Token.createBurnInstruction(\n        splToken.TOKEN_PROGRAM_ID,\n        TOKEN_PUB_KEY,\n        new web3.PublicKey(account),\n        new web3.PublicKey(wallet),\n        [],\n        toSatoshi(parseFloat(burnAmount))\n      )\n    );\n    tx.add(\n      new web3.TransactionInstruction({\n        keys: [\n          {\n            pubkey: new web3.PublicKey(wallet),\n            isSigner: true,\n            isWritable: false,\n          },\n        ],\n        programId: new web3.PublicKey(\n          \"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"\n        ),\n        data: Buffer.from(\n          \"BURN|\" + burnDestination + \"|\" + toSatoshi(parseFloat(burnAmount))\n        ),\n      })\n    );\n    tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n    tx.feePayer = new web3.PublicKey(wallet);\n\n    // Sign and send.\n    const { signature } = await provider.signAndSendTransaction(tx);\n    await connection.confirmTransaction(signature);\n\n    await refresh();\n  };\n\n  const onWithdraw = async (burn) => {\n    for (const authorityNode of AUTHORITY_NODES) {\n      await post(`${authorityLink(authorityNode)}/submitWithdrawal`, {\n        burn: burn,\n      });\n    }\n\n    await refresh();\n  };\n\n  return (\n    <div className=\"controller\">\n      <header className=\"App-header\">\n        <Container>\n          <a\n            className=\"button button2\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href={`https://solscan.io/token/${TOKEN_PUB_KEY}`}\n          >\n            wDingocoin (SOL) SPL Token\n          </a>\n          <a\n            className=\"button button4\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://dingocoin.org\"\n          >\n            Visit Dingocoin\n          </a>\n          <br />\n          <OnboardingButton\n            provider={provider}\n            onWalletChange={onWalletChange}\n            onAccountChange={onAccountChange}\n          />\n          <p className=\"mt-4\">\n            <span style={{ color: \"red\", fontSize: \"1.5rem\" }}>\n              <b>WARNING:</b>\n            </span>\n            <br />\n            <span style={{color: \"red\", fontSize: \"1rem\"}}>\n              SOL's SPL token is currently experiencing some bugs in minting.\n              <br/>\n              Hence, all mints will be suspended until SOL fixes the bug.\n              <br/>\n              Please REFRAIN FROM DEPOSITING YOUR DINGOCOINS.\n              <br/>\n              If you have deposited Dingocoins but your wDingocoins did not get minted,\n              please contact us on Discord.\n            </span>\n          </p>\n        </Container>\n      </header>\n\n      {wallet && account && aliveNodes && (\n        <div>\n          <hr />\n          <section className=\"section-b\">\n            <h3>\n              Convert{\" \"}\n              <a target=\"_blank\" href=\"https://dingocoin.org\" rel=\"noreferrer\">\n                Dingocoin\n              </a>{\" \"}\n              → wDingocoin\n            </h3>\n            {hasMintDepositAddress === null && <div className=\"loader\"></div>}\n            {hasMintDepositAddress === false &&\n              aliveNodes !== null &&\n              aliveNodes.length === AUTHORITY_NODES.length && (\n                <div>\n                  {!isCreatingMintDepositAddress ? (\n                    <p>\n                      <button onClick={onCreateDepositAddress}>\n                        Create your Dingocoin deposit address\n                      </button>\n                    </p>\n                  ) : (\n                    <div className=\"loader\"></div>\n                  )}\n                </div>\n              )}\n            {hasMintDepositAddress === false &&\n              aliveNodes !== null &&\n              aliveNodes.length !== AUTHORITY_NODES.length && (\n                <p>\n                  <span style={{ color: \"red\" }}>\n                    <b>\n                      Temporarily unable to create deposit address: all\n                      authority nodes required to be online.\n                    </b>\n                  </span>\n                </p>\n              )}\n            {hasMintDepositAddress === true && (\n              <div>\n                <table>\n                  <thead>\n                    <tr>\n                      <th className=\"long-header\">Your deposit address</th>\n                      <th className=\"short-header\">Unconfirmed</th>\n                      <th className=\"short-header\">Confirmed*</th>\n                      <th className=\"short-header\">Approved</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {mintDepositAddresses.map((x) => {\n                      return (\n                        <tr key={x.depositAddress}>\n                          <td className=\"long-header\">{x.depositAddress}</td>\n                          <td className=\"short-header\">\n                            {fromSatoshi(x.unconfirmedAmount)}\n                          </td>\n                          <td className=\"short-header\">\n                            {fromSatoshi(x.depositedAmount)}\n                          </td>\n                          <td className=\"short-header\">\n                            {fromSatoshi(x.approvedAmount)}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n                <p className=\"mt-4\">\n                  <b>\n                    Your confirmed balance will be sent automatically to your\n                    SOL wallet within 24 hours.\n                    <br />\n                    Conversions require a confirmed balance of at least 100,000.\n                  </b>\n                </p>\n                <p>\n                  (* Deposits require 120 confirmations (about 2 hours).)\n                  <br />\n                  (* The amount here is after a fee deduction of 1% of total\n                  deposited amount)\n                </p>\n              </div>\n            )}\n          </section>\n\n          <hr />\n\n          <section className=\"section-b\">\n            <h3>\n              Convert wDingocoin →{\" \"}\n              <a target=\"_blank\" href=\"https://dingocoin.org\" rel=\"noreferrer\">\n                Dingocoin\n              </a>\n            </h3>\n            {aliveNodes !== null &&\n              aliveNodes.length !== AUTHORITY_NODES.length && (\n                <p>\n                  <span style={{ color: \"red\" }}>\n                    <b>\n                      Withdrawals temporarily unavailable: all authority nodes\n                      required to be online.\n                    </b>\n                  </span>\n                </p>\n              )}\n            {aliveNodes !== null &&\n              aliveNodes.length === AUTHORITY_NODES.length && (\n                <div>\n                  <p>\n                    <span style={{ color: \"red\" }}>\n                      IMPORTANT: Please ensure that you have entered the correct{\" \"}\n                      <b>\n                        <u>\n                          <a\n                            target=\"_blank\"\n                            href=\"https://dingocoin.org\"\n                            rel=\"noreferrer\"\n                          >\n                            Dingocoin\n                          </a>{\" \"}\n                          MAINNET address\n                        </u>\n                      </b>{\" \"}\n                      and <b>amount</b>.\n                    </span>\n                    <br />\n                    <span style={{ color: \"red\" }}>\n                      Any incorrect entry is irreversible and will not be\n                      refunded.\n                    </span>\n                  </p>\n                  <p>\n                    <a\n                      target=\"_blank\"\n                      href=\"https://dingocoin.org\"\n                      rel=\"noreferrer\"\n                    >\n                      Dingocoin\n                    </a>{\" \"}\n                    withdrawal address:{\" \"}\n                    <input\n                      className=\"inputlong\"\n                      value={burnDestination}\n                      onChange={onBurnDestinationChange}\n                      placeholder={\"(e.g. DQBx7G4aozdqYFCv2dU4kacaEcPzwg8dkZ)\"}\n                    ></input>\n                  </p>\n                  <p>\n                    wDingocoins to convert:{\" \"}\n                    <input\n                      className=\"inputshort\"\n                      value={burnAmount}\n                      onChange={onBurnAmountChange}\n                      placeholder=\"(e.g. 123450.69)\"\n                    ></input>\n                  </p>\n                  <p>\n                    <button onClick={onBurn}>Authorize and burn</button>\n                  </p>\n                  {burnHistory === null && <div className=\"loader\"></div>}\n                  {burnHistory !== null && burnHistory.length > 0 && (\n                    <div>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th className=\"long-header\">Withdrawal address</th>\n                            <th className=\"short-header\">Burned</th>\n                            <th className=\"short-header\">Withdrawal status</th>\n                            <th className=\"short-header\">Action</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {burnHistory.map((x) => {\n                            return (\n                              <tr key={x.burnIndex}>\n                                <td className=\"long-header\">\n                                  {x.burnDestination}\n                                </td>\n                                <td className=\"short-header\">\n                                  {fromSatoshi(x.burnAmount)}\n                                </td>\n                                <td className=\"short-header\">\n                                  {x.status === null\n                                    ? \"Not submitted\"\n                                    : x.status === \"SUBMITTED\"\n                                    ? \"Submitted\"\n                                    : x.status === \"APPROVED\"\n                                    ? \"Approved\"\n                                    : \"UNKNOWN\"}\n                                </td>\n                                <td className=\"short-header\">\n                                  {x.status !== null ? null : (\n                                    <button onClick={() => onWithdraw(x)}>\n                                      Submit for withdrawal\n                                    </button>\n                                  )}\n                                </td>\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n                      <br />\n                      <p>\n                        <b>\n                          (Withdrawals may take <u>up to 24 hours</u> to\n                          dispense)\n                        </b>\n                      </p>\n                      <p>\n                        (Each withdrawal is subject to a fee of 1% of burned\n                        amount)\n                      </p>\n                    </div>\n                  )}\n                </div>\n              )}\n          </section>\n        </div>\n      )}\n\n      <hr />\n\n      <section className=\"section-a\">\n        <h3>SOL Custodian Status</h3>\n        <h5>\n          Status of Authority Nodes: <br />\n          {aliveNodes === null && <div className=\"loader\"></div>}\n          <b>\n            {aliveNodes &&\n              AUTHORITY_NODES.map((x, i) => (\n                <span\n                  style={{ color: aliveNodes.includes(i) ? \"green\" : \"red\" }}\n                >\n                  [{x.label}: {aliveNodes.includes(i) ? \"Up\" : \"Down\"}]{\" \"}\n                </span>\n              ))}\n          </b>\n        </h5>\n        {aliveNodes !== null && (\n          <p>\n            (Nodes not online? Our load protection system was probably triggered\n            by too many of your requests. Please try again in a few minutes.)\n          </p>\n        )}\n        {aliveNodes !== null && stats === null && (\n          <div className=\"loader\"></div>\n        )}\n        {stats && (\n          <div>\n            <table>\n              <tbody>\n                <tr>\n                  <td className=\"long-header\">\n                    <a\n                      target=\"_blank\"\n                      href=\"https://dingocoin.org\"\n                      rel=\"noreferrer\"\n                    >\n                      Dingocoin\n                    </a>{\" \"}\n                    Holdings\n                  </td>\n                  <td className=\"short-header\">\n                    {fromSatoshi(\n                      (\n                        BigInt(stats.unconfirmedUtxos.totalChangeBalance) +\n                        BigInt(stats.unconfirmedUtxos.totalDepositsBalance)\n                      ).toString()\n                    )}\n                  </td>\n                </tr>\n                {\n                  <tr>\n                    <td className=\"long-header\">wDingocoin Pending Mint</td>\n                    <td className=\"short-header\">\n                      {fromSatoshi(\n                        stats.confirmedDeposits.remainingApprovableAmount\n                      )}\n                    </td>\n                  </tr>\n                }\n                <br />\n                <tr>\n                  <td className=\"long-header\">Dingocoin Deposited</td>\n                  <td className=\"short-header\">\n                    {fromSatoshi(\n                      BigInt(\n                        stats.unconfirmedDeposits.totalDepositedAmount\n                      ).toString()\n                    )}\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"long-header\">Dingocoin Withdrawn</td>\n                  <td className=\"short-header\">\n                    {fromSatoshi(stats.withdrawals.totalApprovedAmount)}\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"long-header\">Dingocoin Pending Withdraw</td>\n                  <td className=\"short-header\">\n                    {fromSatoshi(stats.withdrawals.remainingApprovableAmount)}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <br />\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}\n\nexport default SolController;\n","import MetaMaskOnboarding from \"@metamask/onboarding\";\nimport React from \"react\";\nimport Web3 from \"web3\";\nimport BigInt from \"big-integer\";\nimport bs58 from \"bs58\";\nimport crypto from \"crypto\";\nimport { Container } from \"react-bootstrap\";\n\nconst DECIMALS = 8;\n\nconst toSatoshi = (x) => {\n  let xs = x.toFixed(DECIMALS);\n  xs = xs.substr(0, xs.length - DECIMALS - 1) + xs.slice(xs.length - DECIMALS);\n  return xs;\n};\n\nconst numberWithCommas = (x) => {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\nconst fromSatoshi = (xs) => {\n  let integer = xs.slice(0, xs.length - DECIMALS);\n  if (integer === \"\") {\n    integer = \"0\";\n  }\n\n  const fractional = xs.slice(xs.length - DECIMALS).padStart(DECIMALS, \"0\");\n  if (BigInt(fractional) >= 50000000) {\n    integer = (BigInt(integer) + BigInt(\"1\")).toString();\n  }\n\n  return integer === \"\" ? \"0\" : numberWithCommas(integer);\n};\n\nfunction sha256(data) {\n  return crypto.createHash(\"sha256\").update(data).digest();\n}\n\nconst isValidDingocoinAddress = (x) => {\n  const raw = bs58.decode(x);\n  if (raw.length !== 25) {\n    return false;\n  }\n  if (raw[0] !== 0x16 && raw[0] !== 0x1e) {\n    return false;\n  }\n  const checksum = sha256(sha256(raw.slice(0, 21)));\n  return raw.slice(21, 25).equals(checksum.slice(0, 4));\n};\n\nconst AUTHORITY_NODES = [\n  {\n    location: \"n0.dingocoin.org\",\n    port: 8443,\n    walletAddress: \"0x0bee89d055Bc18250C71B72B2e24EcF723e9a8ef\",\n  },\n  {\n    location: \"n1.dingocoin.org\",\n    port: 8443,\n    walletAddress: \"0xD14Bc59472b8f1fA5baA99a17855d06aD327dCae\",\n  },\n  {\n    location: \"n2.dingocoin.org\",\n    port: 8443,\n    walletAddress: \"0x3279f7B244F0194fd359D5AC29359ca676193aDb\",\n  },\n  {\n    location: \"n3.dingocoin.org\",\n    port: 8443,\n    walletAddress: \"0x9d046eDc2C80727259355E4CFBb8B72750348Ad9\",\n  },\n  {\n    location: \"n4.dingocoin.org\",\n    port: 8443,\n    walletAddress: \"0x5234B6a4df31598dc4B26183ad7C452E47AB267F\",\n  },\n];\nconst AUTHORITY_THRESHOLD = 3;\nconst authorityLink = (x) => {\n  return `https://${x.location}:${x.port}`;\n};\n\nconst CONTRACT_ADDRESS = \"0x9b208b117B2C4F76C1534B6f006b033220a681A4\";\n\nconst CONTRACT_ABI = [\n  { inputs: [], stateMutability: \"nonpayable\", type: \"constructor\" },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"address\", name: \"from\", type: \"address\" },\n      { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n    ],\n    name: \"allowance\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"approve\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"authorityAddresses\",\n    outputs: [{ internalType: \"address[]\", name: \"\", type: \"address[]\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"authorityThreshold\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"string\", name: \"destination\", type: \"string\" },\n    ],\n    name: \"burn\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"addr\", type: \"address\" }],\n    name: \"burnHistory\",\n    outputs: [\n      { internalType: \"string[]\", name: \"\", type: \"string[]\" },\n      { internalType: \"uint256[]\", name: \"\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"addr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"index\", type: \"uint256\" },\n    ],\n    name: \"burnHistory\",\n    outputs: [\n      { internalType: \"string\", name: \"\", type: \"string\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address[]\", name: \"addrs\", type: \"address[]\" },\n      { internalType: \"uint256[]\", name: \"indexes\", type: \"uint256[]\" },\n    ],\n    name: \"burnHistoryMultiple\",\n    outputs: [\n      { internalType: \"string[]\", name: \"\", type: \"string[]\" },\n      { internalType: \"uint256[]\", name: \"\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"configurationNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"newAuthorityAddresses\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"newAuthorityThreshold\",\n        type: \"uint256\",\n      },\n      { internalType: \"uint256\", name: \"newMinBurnAmount\", type: \"uint256\" },\n      { internalType: \"uint8[]\", name: \"signV\", type: \"uint8[]\" },\n      { internalType: \"bytes32[]\", name: \"signR\", type: \"bytes32[]\" },\n      { internalType: \"bytes32[]\", name: \"signS\", type: \"bytes32[]\" },\n    ],\n    name: \"configure\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"subtractedValue\", type: \"uint256\" },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"addedValue\", type: \"uint256\" },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"minBurnAmount\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"string\", name: \"depositAddress\", type: \"string\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"uint8[]\", name: \"signV\", type: \"uint8[]\" },\n      { internalType: \"bytes32[]\", name: \"signR\", type: \"bytes32[]\" },\n      { internalType: \"bytes32[]\", name: \"signS\", type: \"bytes32[]\" },\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"addr\", type: \"address\" },\n      { internalType: \"string\", name: \"depositAddress\", type: \"string\" },\n    ],\n    name: \"mintHistory\",\n    outputs: [\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"addr\", type: \"address\" }],\n    name: \"mintNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"transfer\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"sender\", type: \"address\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"transferFrom\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nfunction OnboardingButton(props) {\n  const [buttonText, setButtonText] = React.useState(\n    \"Connect MetaMask wallet to convert\"\n  );\n  const [account, setAccount] = React.useState(null);\n  const onboarding = React.useRef();\n\n  React.useEffect(() => {\n    if (!onboarding.current) {\n      onboarding.current = new MetaMaskOnboarding();\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (!MetaMaskOnboarding.isMetaMaskInstalled()) {\n      setButtonText(\"Click here to install MetaMask!\");\n    }\n  }, [account]);\n\n  const onClick = () => {\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      window.ethereum\n        .request({ method: \"eth_requestAccounts\" })\n        .then((accounts) => {\n          const acc = Web3.utils.toChecksumAddress(accounts[0]);\n          setAccount(acc);\n          setButtonText(acc);\n          if (props.onAccountChange) {\n            props.onAccountChange(acc);\n          }\n        });\n    } else {\n      onboarding.current.startOnboarding();\n    }\n  };\n\n  return (\n    <button\n      className=\"button button3\"\n      disabled={account !== null ? true : false}\n      onClick={onClick}\n    >\n      {buttonText}\n    </button>\n  );\n}\n\nfunction BscController() {\n  const web3 = new Web3(\"https://bsc-dataseed.binance.org\");\n  const contract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\n  async function post(link, data) {\n    const controller = new AbortController();\n    setTimeout(() => controller.abort(), 5000);\n    return (\n      await fetch(link, {\n        withCredentials: true,\n        method: \"POST\",\n        signal: controller.signal,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      })\n    ).json();\n  }\n\n  const [wallet, setWallet] = React.useState(null);\n  const [aliveNodes, setAliveNodes] = React.useState(null);\n  const randAuthorityLink = () => {\n    const node =\n      AUTHORITY_NODES[\n        aliveNodes[Math.floor(Math.random() * aliveNodes.length)]\n      ];\n    return `https://${node.location}:${node.port}`;\n  };\n  const stableAuthorityLink = () => {\n    const node = AUTHORITY_NODES[4];\n    return `https://${node.location}:${node.port}`;\n  };\n\n  const [mintDepositAddresses, setMintDepositAddresses] = React.useState([]);\n  const [hasMintDepositAddress, setHasMintDepositAddress] =\n    React.useState(null);\n  const [isCreatingMintDepositAddress, setIsCreatingMintDepositAddress] =\n    React.useState(false);\n\n  const [burnAmount, setBurnAmount] = React.useState(\"\");\n  const [burnDestination, setBurnDestination] = React.useState(\"\");\n  const [burnHistory, setBurnHistory] = React.useState(null);\n\n  const [stats, setStats] = React.useState(null);\n\n  const onAccountChange = (selectedWallet) => {\n    setWallet(selectedWallet);\n  };\n\n  const refresh = async () => {\n    const mintBalance = (\n      await post(`${randAuthorityLink()}/queryMintBalance`, {\n        mintAddress: wallet,\n      })\n    ).data;\n    if (mintBalance !== null && mintBalance !== undefined) {\n      setMintDepositAddresses([\n        {\n          depositAddress: mintBalance.depositAddress,\n          unconfirmedAmount: mintBalance.unconfirmedAmount,\n          depositedAmount: mintBalance.depositedAmount,\n          mintedAmount: mintBalance.mintedAmount,\n        },\n      ]);\n      setHasMintDepositAddress(true);\n    } else {\n      setMintDepositAddresses([]);\n      setHasMintDepositAddress(false);\n    }\n\n    if (aliveNodes.length === AUTHORITY_NODES.length) {\n      const burnHistories = (\n        await Promise.all(\n          aliveNodes\n            .map((i) => AUTHORITY_NODES[i])\n            .map((x, i) =>\n              post(`${authorityLink(x)}/queryBurnHistory`, {\n                burnAddress: wallet,\n              })\n            )\n        )\n      ).map((x) => x.data.burnHistory);\n      const maxLength = Math.max(...burnHistories.map((x) => x.length));\n\n      const burnHistory = [];\n      for (let i = 0; i < maxLength; i++) {\n        burnHistory.push(burnHistories.filter((x) => x.length > 0)[0][i]);\n        burnHistory[i].burnIndex = i;\n        if (\n          burnHistories.filter((x) => x.length > 0).length <\n          burnHistories.length\n        ) {\n          burnHistory[i].status = null;\n        } else if (\n          burnHistories.filter((x) => x[i].status === null).length > 0\n        ) {\n          burnHistory[i].status = null;\n        } else if (\n          burnHistories.filter((x) => x[i].status === \"SUBMITTED\").length > 0\n        ) {\n          burnHistory[i].status = \"SUBMITTED\";\n        } else if (\n          burnHistories.filter((x) => x[i].status === \"APPROVED\").length !==\n          burnHistories.length\n        ) {\n          throw new Error(\"Invalid burn histories\");\n        } else {\n          burnHistory[i].status = \"APPROVED\";\n        }\n      }\n\n      burnHistory.reverse();\n      setBurnHistory(burnHistory);\n    }\n  };\n\n  React.useEffect(() => {\n    (async () => {\n      if (aliveNodes === null) {\n        const alive = [];\n        for (const i in AUTHORITY_NODES) {\n          await post(`${authorityLink(AUTHORITY_NODES[i])}/ping`)\n            .then(() => {\n              alive.push(parseInt(i));\n            })\n            .catch(() => {});\n        }\n        setAliveNodes(alive);\n      }\n    })();\n  });\n\n  React.useEffect(() => {\n    (async () => {\n      if (aliveNodes !== null && stats === null) {\n        const stats = (await post(`${stableAuthorityLink()}/stats`)).data;\n        stats.totalSupply = await contract.methods.totalSupply().call();\n        setStats(stats);\n      }\n    })();\n  }, [aliveNodes, stats]);\n\n  React.useEffect(() => {\n    if (wallet !== null && aliveNodes !== null) {\n      const refreshLoop = () => {\n        refresh();\n        setTimeout(refreshLoop, 3000);\n      };\n      refreshLoop();\n    }\n  }, [wallet, aliveNodes]);\n\n  const onCreateDepositAddress = async () => {\n    if (aliveNodes.length < AUTHORITY_NODES.length) {\n      alert(\n        \"Creating a deposit address requires all authority nodes to be online.\"\n      );\n      return;\n    }\n\n    setIsCreatingMintDepositAddress(true);\n    const generateDepositAddressResponses = await Promise.all(\n      AUTHORITY_NODES.map(async (x) => {\n        return await post(`${authorityLink(x)}/generateDepositAddress`, {\n          mintAddress: wallet,\n        });\n      })\n    );\n\n    const registerMintDepositAddressResponses = await Promise.all(\n      AUTHORITY_NODES.map(\n        async (x) =>\n          (\n            await post(`${authorityLink(x)}/registerMintDepositAddress`, {\n              mintAddress: wallet,\n              generateDepositAddressResponses: generateDepositAddressResponses,\n            })\n          ).data\n      )\n    );\n\n    if (\n      !registerMintDepositAddressResponses.every(\n        (x) =>\n          x.depositAddress ===\n          registerMintDepositAddressResponses[0].depositAddress\n      )\n    ) {\n      throw new Error(\"Consensus failure on deposit address\");\n    }\n\n    await refresh();\n    setIsCreatingMintDepositAddress(false);\n  };\n\n  const onMint = async (depositAddress) => {\n    const mintTransactionInfos = Array(AUTHORITY_NODES.length).fill(undefined);\n    await Promise.all(\n      AUTHORITY_NODES.map((x, i) => {\n        return post(`${authorityLink(x)}/createMintTransaction`, {\n          mintAddress: wallet,\n        })\n          .then((r) => {\n            mintTransactionInfos[i] = r.data;\n          })\n          .catch(() => {});\n      })\n    );\n    const availableMintTransactionInfos = mintTransactionInfos.filter(\n      (x) => x !== undefined\n    );\n    if (availableMintTransactionInfos.length < AUTHORITY_THRESHOLD) {\n      return alert(\"Failed to collect sufficient signatures for minting.\");\n    }\n    if (\n      !availableMintTransactionInfos.every(\n        (x) => x.mintAddress === availableMintTransactionInfos[0].mintAddress\n      )\n    ) {\n      return alert(\"Consensus failure on mint address.\");\n    }\n    if (\n      !availableMintTransactionInfos.every(\n        (x) => x.nonce === availableMintTransactionInfos[0].nonce\n      )\n    ) {\n      return alert(\"Consensus failure on mint nonce.\");\n    }\n    if (\n      !availableMintTransactionInfos.every(\n        (x) => x.depositAddress === depositAddress\n      )\n    ) {\n      return alert(\"Consensus failure on deposit address.\");\n    }\n    if (\n      !availableMintTransactionInfos.every(\n        (x) => x.mintAmount === availableMintTransactionInfos[0].mintAmount\n      )\n    ) {\n      return alert(\"Consensus failure on mint amount.\");\n    }\n    const mintAmount = availableMintTransactionInfos[0].mintAmount;\n\n    const signV = mintTransactionInfos.map((x) =>\n      x === undefined ? \"0x0\" : x.onContractVerification.v\n    );\n    const signR = mintTransactionInfos.map((x) =>\n      x === undefined ? \"0x0\" : x.onContractVerification.r\n    );\n    const signS = mintTransactionInfos.map((x) =>\n      x === undefined ? \"0x0\" : x.onContractVerification.s\n    );\n\n    await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [\n        {\n          from: wallet,\n          to: CONTRACT_ADDRESS,\n          data: contract.methods\n            .mint(depositAddress, mintAmount, signV, signR, signS)\n            .encodeABI(),\n        },\n      ],\n    });\n\n    await refresh();\n  };\n\n  const onBurnDestinationChange = (e) => {\n    setBurnDestination(e.target.value.replace(/\\s+/, \"\"));\n  };\n\n  const onBurnAmountChange = (e) => {\n    if (/^\\d*\\.?\\d{0,8}$/.test(e.target.value)) {\n      setBurnAmount(e.target.value);\n    }\n  };\n\n  const onBurn = async () => {\n    if (!isValidDingocoinAddress(burnDestination)) {\n      alert(\"Burn destination is not a valid Dingocoin address!\");\n      return;\n    }\n\n    await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [\n        {\n          from: wallet,\n          to: CONTRACT_ADDRESS,\n          data: contract.methods\n            .burn(toSatoshi(Number(burnAmount)), burnDestination)\n            .encodeABI(),\n        },\n      ],\n    });\n\n    await refresh();\n  };\n\n  const onWithdraw = async (burnIndex) => {\n    for (const authorityNode of AUTHORITY_NODES) {\n      await post(`${authorityLink(authorityNode)}/submitWithdrawal`, {\n        burnAddress: wallet,\n        burnIndex: burnIndex,\n      });\n    }\n\n    await refresh();\n  };\n\n  return (\n    <div className=\"controller\">\n      <header className=\"App-header\">\n        <Container>\n          <a\n            className=\"button button1\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://pancakeswap.finance/swap?outputCurrency=0x9b208b117B2C4F76C1534B6f006b033220a681A4\"\n          >\n            Buy wDingocoin (BSC)\n          </a>\n          <a\n            className=\"button button1\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://poocoin.app/tokens/0x9b208b117b2c4f76c1534b6f006b033220a681a4\"\n          >\n            wDingocoin (BSC) Price\n          </a>\n          <a\n            className=\"button button2\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href={`https://bscscan.com/token/${CONTRACT_ADDRESS}`}\n          >\n            wDingocoin (BSC) Contract\n          </a>\n          <a\n            className=\"button button4\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://dingocoin.org\"\n          >\n            Visit Dingocoin\n          </a>\n          <br />\n          <OnboardingButton onAccountChange={onAccountChange} />\n        </Container>\n      </header>\n\n      {wallet && aliveNodes && (\n        <div>\n          <section className=\"section-b\">\n            <h3>\n              Convert{\" \"}\n              <a target=\"_blank\" href=\"https://dingocoin.org\" rel=\"noreferrer\">\n                Dingocoin\n              </a>{\" \"}\n              → wDingocoin\n            </h3>\n            {hasMintDepositAddress === null && <div className=\"loader\"></div>}\n            {hasMintDepositAddress === false &&\n              aliveNodes !== null &&\n              aliveNodes.length === AUTHORITY_NODES.length && (\n                <div>\n                  {!isCreatingMintDepositAddress ? (\n                    <p>\n                      <button onClick={onCreateDepositAddress}>\n                        Create your Dingocoin deposit address\n                      </button>\n                    </p>\n                  ) : (\n                    <div className=\"loader\"></div>\n                  )}\n                </div>\n              )}\n            {hasMintDepositAddress === false &&\n              aliveNodes !== null &&\n              aliveNodes.length !== AUTHORITY_NODES.length && (\n                <p>\n                  <span style={{ color: \"red\" }}>\n                    <b>\n                      Temporarily unable to create deposit address: all\n                      authority nodes required to be online.\n                    </b>\n                  </span>\n                </p>\n              )}\n            {hasMintDepositAddress === true && (\n              <div>\n                <table>\n                  <thead>\n                    <tr>\n                      <th className=\"long-header\">Your deposit address</th>\n                      <th className=\"short-header\">Unconfirmed</th>\n                      <th className=\"short-header\">Confirmed*</th>\n                      <th className=\"short-header\">Minted</th>\n                      <th className=\"short-header\">Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {mintDepositAddresses.map((x) => {\n                      return (\n                        <tr key={x.depositAddress}>\n                          <td className=\"long-header\">{x.depositAddress}</td>\n                          <td className=\"short-header\">\n                            {fromSatoshi(x.unconfirmedAmount)}\n                          </td>\n                          <td className=\"short-header\">\n                            {fromSatoshi(x.depositedAmount)}\n                          </td>\n                          <td className=\"short-header\">\n                            {fromSatoshi(x.mintedAmount)}\n                          </td>\n                          <td className=\"short-header\">\n                            {BigInt(x.mintedAmount) <\n                              BigInt(x.depositedAmount) && (\n                              <button onClick={() => onMint(x.depositAddress)}>\n                                Mint balance\n                              </button>\n                            )}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n                <br />\n                <p>(* Deposits require 120 confirmations (about 2 hours).)</p>\n                <p>\n                  (* The amount here is after a fee deduction of 10 Dingocoins +\n                  1% of total deposited amount thereafter)\n                </p>\n              </div>\n            )}\n          </section>\n\n          <hr />\n\n          <section className=\"section-b\">\n            <h3>\n              Convert wDingocoin →{\" \"}\n              <a target=\"_blank\" href=\"https://dingocoin.org\" rel=\"noreferrer\">\n                Dingocoin\n              </a>\n            </h3>\n            {aliveNodes !== null &&\n              aliveNodes.length !== AUTHORITY_NODES.length && (\n                <p>\n                  <span style={{ color: \"red\" }}>\n                    <b>\n                      Withdrawals temporarily unavailable: all authority nodes\n                      required to be online.\n                    </b>\n                  </span>\n                </p>\n              )}\n            {aliveNodes !== null &&\n              aliveNodes.length === AUTHORITY_NODES.length && (\n                <div>\n                  <p>\n                    <span style={{ color: \"red\" }}>\n                      IMPORTANT: Please ensure that you have entered the correct{\" \"}\n                      <b>\n                        <u>\n                          <a\n                            target=\"_blank\"\n                            href=\"https://dingocoin.org\"\n                            rel=\"noreferrer\"\n                          >\n                            Dingocoin\n                          </a>{\" \"}\n                          MAINNET address\n                        </u>\n                      </b>{\" \"}\n                      and <b>amount</b>.\n                    </span>\n                    <br />\n                    <span style={{ color: \"red\" }}>\n                      Any incorrect entry is irreversible and will not be\n                      refunded.\n                    </span>\n                  </p>\n                  <p>\n                    <a\n                      target=\"_blank\"\n                      href=\"https://dingocoin.org\"\n                      rel=\"noreferrer\"\n                    >\n                      Dingocoin\n                    </a>{\" \"}\n                    withdrawal address:{\" \"}\n                    <input\n                      className=\"inputlong\"\n                      value={burnDestination}\n                      onChange={onBurnDestinationChange}\n                      placeHolder={\"(e.g. DQBx7G4aozdqYFCv2dU4kacaEcPzwg8dkZ)\"}\n                    ></input>\n                  </p>\n                  <p>\n                    wDingocoins to convert:{\" \"}\n                    <input\n                      className=\"inputshort\"\n                      value={burnAmount}\n                      onChange={onBurnAmountChange}\n                      placeHolder=\"(e.g. 123450.69)\"\n                    ></input>\n                  </p>\n                  <p>\n                    <button onClick={onBurn}>Authorize and burn</button>\n                  </p>\n                  {burnHistory === null && <div className=\"loader\"></div>}\n                  {burnHistory !== null && burnHistory.length > 0 && (\n                    <div>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th className=\"long-header\">Withdrawal address</th>\n                            <th className=\"short-header\">Burned</th>\n                            <th className=\"short-header\">Withdrawal status</th>\n                            <th className=\"short-header\">Action</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {burnHistory.map((x) => {\n                            return (\n                              <tr key={x.burnIndex}>\n                                <td className=\"long-header\">\n                                  {x.burnDestination}\n                                </td>\n                                <td className=\"short-header\">\n                                  {fromSatoshi(x.burnAmount)}\n                                </td>\n                                <td className=\"short-header\">\n                                  {x.status === null\n                                    ? \"Not submitted\"\n                                    : x.status === \"SUBMITTED\"\n                                    ? \"Submitted\"\n                                    : x.status === \"APPROVED\"\n                                    ? \"Approved\"\n                                    : \"UNKNOWN\"}\n                                </td>\n                                <td className=\"short-header\">\n                                  {x.status !== null ? null : (\n                                    <button\n                                      onClick={() => onWithdraw(x.burnIndex)}\n                                    >\n                                      Submit for withdrawal\n                                    </button>\n                                  )}\n                                </td>\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n                      <br />\n                      <p>\n                        <b>\n                          (Withdrawals may take <u>up to 24 hours</u> to\n                          dispense)\n                        </b>\n                      </p>\n                      <p>\n                        (Each withdrawal is subject to a fee of 10 Dingocoins +\n                        1% of burned amount thereafter)\n                      </p>\n                    </div>\n                  )}\n                </div>\n              )}\n          </section>\n        </div>\n      )}\n\n      <hr />\n\n      <section className=\"section-a\">\n        <h3>BSC Custodian Status</h3>\n        <h5>\n          Status of Authority Nodes: <br />\n          {aliveNodes === null && <div className=\"loader\"></div>}\n          <b>\n            {aliveNodes &&\n              AUTHORITY_NODES.map((x, i) => (\n                <span\n                  style={{ color: aliveNodes.includes(i) ? \"green\" : \"red\" }}\n                >\n                  [Node {i}: {aliveNodes.includes(i) ? \"Up\" : \"Down\"}]{\" \"}\n                </span>\n              ))}\n          </b>\n        </h5>\n        {aliveNodes !== null && (\n          <p>\n            (Nodes not online? Our load protection system was probably triggered\n            by too many of your requests. Please try again in a few minutes.)\n          </p>\n        )}\n        {aliveNodes !== null && stats === null && (\n          <div className=\"loader\"></div>\n        )}\n        {stats && (\n          <div>\n            <table>\n              <tbody>\n                <tr>\n                  <td className=\"long-header\">\n                    <a\n                      target=\"_blank\"\n                      href=\"https://dingocoin.org\"\n                      rel=\"noreferrer\"\n                    >\n                      Dingocoin\n                    </a>{\" \"}\n                    Holdings\n                  </td>\n                  <td className=\"short-header\">\n                    {fromSatoshi(\n                      (\n                        BigInt(stats.unconfirmedUtxos.totalChangeBalance) +\n                        BigInt(stats.unconfirmedUtxos.totalDepositsBalance)\n                      ).toString()\n                    )}\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"long-header\">wDingocoin in Circulation</td>\n                  <td className=\"short-header\">\n                    {fromSatoshi(stats.totalSupply)}\n                  </td>\n                </tr>\n                <br />\n                <tr>\n                  <td className=\"long-header\">Dingocoin Deposited</td>\n                  <td className=\"short-header\">\n                    {fromSatoshi(\n                      BigInt(\n                        stats.unconfirmedDeposits.totalDepositedAmount\n                      ).toString()\n                    )}\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"long-header\">Dingocoin Withdrawn</td>\n                  <td className=\"short-header\">\n                    {fromSatoshi(stats.withdrawals.totalApprovedAmount)}\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"long-header\">Dingocoin Pending Withdraw</td>\n                  <td className=\"short-header\">\n                    {fromSatoshi(\n                      (\n                        BigInt(stats.withdrawals.totalApprovableAmount) -\n                        BigInt(stats.withdrawals.totalApprovedAmount)\n                      ).toString()\n                    )}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <br />\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}\n\nexport default BscController;\n","export default __webpack_public_path__ + \"static/media/dingocoin.15331900.png\";","import \"./App.scss\";\nimport BscController from \"./BscController\";\nimport SolController from \"./SolController\";\nimport {\n  Navbar,\n  Nav,\n  Container,\n  Dropdown,\n  DropdownButton,\n  Row\n} from \"react-bootstrap\";\nimport DingocoinLogo from \"./assets/img/dingocoin.png\";\nimport React from \"react\";\n\nfunction App() {\n  const [controller, setController] = React.useState(null);\n\n  return (\n    <div className=\"App\">\n      <Navbar className=\"navbar\" bg=\"dark\" expand=\"lg\" sticky=\"top\">\n        <Container>\n          <Navbar.Brand href=\"#home\" className=\"navbar-brand\">\n            <img alt=\"\" src={DingocoinLogo} />\n            <span>DINGOCOIN</span>\n            <span className=\"navbar-brand-subtitle\"> WRAP</span>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse>\n            <Nav className=\"ms-auto\">\n              <Nav.Link\n                href=\"https://www.dingocoin.org\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <b>Visit Dingocoin</b>\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      <header className=\"App-header\">\n        <Container>\n          <Row>\n            <h1 className=\"mt-4\">wDingocoin Custodian</h1>\n          </Row>\n          <Row>\n            <div className=\"header-logos\">\n              <img src=\"wDingocoin.png\" alt=\"wDingocoin Logo\"></img>\n              <span>&nbsp;⇌&nbsp;</span>\n              <img src=\"Dingocoin.png\" alt=\"Dingocoin Logo\"></img>\n            </div>\n          </Row>\n          <Row>\n            <p className=\"mb-0\">\n              1 wDingocoin = 1{\" \"}\n              <a target=\"_blank\" href=\"https://dingocoin.org\" rel=\"noreferrer\">\n                Dingocoin\n              </a>\n            </p>\n          </Row>\n          <Row>\n            <DropdownButton\n              title={\n                controller === null\n                  ? \"Select Wrapped Network\"\n                  : controller === \"bsc\"\n                  ? \"Binance Smart Chain (BSC)\"\n                  : \"Solana (SOL)\"\n              }\n              className=\"mb-2\"\n            >\n              <Dropdown.Item\n                onClick={() => {\n                  setController(\"bsc\");\n                }}\n              >\n                Binance Smart Chain (BSC)\n              </Dropdown.Item>\n              <Dropdown.Item\n                onClick={() => {\n                  setController(\"sol\");\n                }}\n              >\n                Solana (SOL)\n              </Dropdown.Item>\n            </DropdownButton>\n          </Row>\n        </Container>\n      </header>\n\n      {controller === \"bsc\" && <BscController />}\n      {controller === \"sol\" && <SolController />}\n      {controller === null && <div className=\"controller\"><div className=\"section-a\"></div></div>}\n\n      <section className=\"section-footer\">\n        <h6>\n          Copyright © The Dingocoin Project 2021\n        </h6>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}